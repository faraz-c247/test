"use client";

import React, { useState } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/react-stripe-js";
import {
  Container,
  Row,
  Col,
  Card,
  Button,
  Badge,
  Alert,
  Spinner,
} from "react-bootstrap";
import SidebarLayout from "@/components/common/SidebarLayout";
import LoadingSpinner from "@/components/common/LoadingSpinner";
import Modal from "@/components/common/Modal";
import { useSubscriptionPlans, useUserCredits } from "@/hooks/useSubscription";
import { toast } from "react-hot-toast";
import apiClient from "@/lib/apiClient";

// Initialize Stripe
const stripeKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || "";
console.log("Stripe key loaded:", stripeKey ? "Yes" : "No");
const stripePromise = loadStripe(stripeKey);

// Payment Form Component
function PaymentForm({
  selectedPlan,
  onSuccess,
  onCancel,
  isLoading,
}: {
  selectedPlan: any;
  onSuccess: () => void;
  onCancel: () => void;
  isLoading: boolean;
}) {
  const stripe = useStripe();
  const elements = useElements();
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setProcessing(true);
    setError(null);

    try {
      // Create payment intent on backend
      const response = await apiClient.post(
        "/subscription/create-payment-intent",
        {
          planId: selectedPlan.id,
        }
      );

      if (!response.data.success) {
        throw new Error(response.data.message);
      }

      const { clientSecret } = response.data.data;

      // Confirm payment with Stripe
      const result = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement)!,
        },
      });

      if (result.error) {
        setError(result.error.message || "Payment failed");
      } else {
        // Complete purchase on backend
        await apiClient.post("/subscription/complete-purchase", {
          paymentIntentId: result.paymentIntent.id,
        });

        toast.success("Payment successful! Credits added to your account.");
        onSuccess();
      }
    } catch (err: any) {
      setError(err.message || "Payment failed");
      toast.error(err.message || "Payment failed");
    } finally {
      setProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-4">
        <div className="p-4 border rounded-3 bg-light">
          <h6 className="mb-3">Payment Details</h6>
          <div className="p-3 border rounded bg-white">
            <CardElement
              options={{
                style: {
                  base: {
                    fontSize: "16px",
                    color: "#424242",
                    fontFamily: "Poppins, sans-serif",
                    "::placeholder": {
                      color: "#aab7c4",
                    },
                  },
                  invalid: {
                    color: "#9e2146",
                  },
                },
              }}
            />
          </div>
        </div>
      </div>

      {error && (
        <Alert variant="danger" className="mb-3">
          {error}
        </Alert>
      )}

      <div className="d-flex gap-2 justify-content-end">
        <Button
          variant="outline-secondary"
          onClick={onCancel}
          disabled={processing || isLoading}
        >
          Cancel
        </Button>
        <Button
          type="submit"
          variant="primary"
          disabled={!stripe || processing || isLoading}
          className="px-4"
        >
          {processing ? (
            <>
              <Spinner size="sm" className="me-2" />
              Processing...
            </>
          ) : (
            `Pay ${new Intl.NumberFormat("en-US", {
              style: "currency",
              currency: "USD",
            }).format(selectedPlan.price)}`
          )}
        </Button>
      </div>
    </form>
  );
}

export default function PurchasePlansPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [selectedPlan, setSelectedPlan] = useState<any>(null);
  const [showPaymentModal, setShowPaymentModal] = useState(false);

  // API calls
  const { data: plansData, isLoading: plansLoading } = useSubscriptionPlans();
  const {
    data: creditsData,
    isLoading: creditsLoading,
    refetch: refetchCredits,
  } = useUserCredits();

  // Combined loading state
  const isLoading = plansLoading || creditsLoading;

  // Session loading
  if (status === "loading" || plansLoading || creditsLoading) {
    return (
      <SidebarLayout>
        <Container className="py-5">
          <LoadingSpinner size="lg" fullScreen={false} />
        </Container>
      </SidebarLayout>
    );
  }

  // Redirect if not authenticated
  if (!session) {
    router.push("/login");
    return null;
  }

  const plans = plansData?.data?.plans || [];
  const credits = creditsData?.data;

  const handleSelectPlan = (plan: any) => {
    console.log("Selected plan:", plan);
    setSelectedPlan(plan);
    setShowPaymentModal(true);
  };

  const handlePaymentSuccess = () => {
    setShowPaymentModal(false);
    setSelectedPlan(null);
    refetchCredits(); // Refresh credits after purchase
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount);
  };

  const calculatePricePerReport = (plan: any) => {
    const pricePerReport = plan.price / plan.credits;
    return formatCurrency(pricePerReport);
  };

  const calculateSavings = (plan: any) => {
    const oneOffPrice = 15; // Price of One-Off Report
    const totalOneOffPrice = oneOffPrice * plan.credits;
    const savings = totalOneOffPrice - plan.price;
    return savings > 0 ? savings : 0;
  };

  const getSavingsPercentage = (plan: any) => {
    const oneOffPrice = 15;
    const totalOneOffPrice = oneOffPrice * plan.credits;
    const savings = calculateSavings(plan);
    return Math.round((savings / totalOneOffPrice) * 100);
  };

  return (
    <SidebarLayout>
      <Container fluid className="py-4">
        {/* Header Section */}
        <div className="text-center mb-5">
          <div className="mb-4">
            <h1 className="display-4 fw-bold text-primary-custom mb-3">
              Choose Your Plan
            </h1>
            <p className="fs-5 text-secondary-custom mb-0">
              Unlock powerful rental intelligence with our flexible credit
              packages
            </p>
          </div>

          {credits && (
            <div className="d-inline-flex align-items-center bg-green-light px-4 py-3 rounded-figma-xl">
              <div className="me-3 fs-2">💳</div>
              <div className="text-start">
                <div className="h4 text-primary-custom mb-0">
                  {credits.remainingCredits} Credits
                </div>
                <small className="text-secondary-custom">
                  Available in your account
                </small>
              </div>
            </div>
          )}
        </div>

        {/* Current Credits Alert */}
        {credits && credits.remainingCredits > 0 && (
          <Alert
            variant="info"
            className="d-flex justify-content-between align-items-center mb-5 border-0 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-figma-xl"
          >
            <div className="d-flex align-items-center">
              <span className="fs-2 me-3">🎯</span>
              <div>
                <strong className="text-primary-custom">
                  You have {credits.remainingCredits} credits ready to use!
                </strong>
                <div className="small text-secondary-custom mt-1">
                  Generate up to {credits.remainingCredits} detailed property
                  report
                  {credits.remainingCredits !== 1 ? "s" : ""} right now.
                </div>
              </div>
            </div>
            <Button
              variant="primary"
              className="rounded-figma-md fw-semibold px-4"
              as="a"
              href="/generate-report"
            >
              Generate Report →
            </Button>
          </Alert>
        )}

        {/* Subscription Plans */}
        <Row className="g-4 justify-content-center">
          {plans.map((plan: any, index: number) => {
            const isPopular = plan.name === "Pro 20-Pack";
            const savings = calculateSavings(plan);
            const savingsPercentage = getSavingsPercentage(plan);

            return (
              <Col key={plan.id} xl={3} lg={4} md={6}>
                <Card
                  className={`h-100 border-0 shadow-lg position-relative overflow-hidden transition-all duration-300 hover:transform hover:scale-105 ${
                    isPopular ? "border-primary-custom" : ""
                  }`}
                  style={{
                    background: isPopular
                      ? "linear-gradient(135deg, rgba(44, 162, 72, 0.05) 0%, rgba(44, 162, 72, 0.1) 100%)"
                      : "white",
                  }}
                >
                  {isPopular && (
                    <div className="position-absolute top-0 start-50 translate-middle z-3">
                      <Badge
                        className="px-3 py-2 rounded-figma-md fw-semibold"
                        style={{
                          background:
                            "linear-gradient(135deg, #FFB24A 0%, #FF8C42 100%)",
                          border: "none",
                          color: "white",
                        }}
                      >
                        ⭐ MOST POPULAR
                      </Badge>
                    </div>
                  )}

                  {savings > 0 && (
                    <div className="position-absolute top-0 end-0 m-3">
                      <Badge
                        bg="success"
                        className="rounded-figma-md px-2 py-1 fw-semibold"
                      >
                        Save {savingsPercentage}%
                      </Badge>
                    </div>
                  )}

                  <Card.Body className="p-4 text-center d-flex flex-column">
                    <div className="mb-4">
                      <div className="mb-3">
                        <div
                          className="mx-auto rounded-circle d-flex align-items-center justify-content-center"
                          style={{
                            width: "80px",
                            height: "80px",
                            background: isPopular
                              ? "linear-gradient(135deg, #2CA248 0%, #20CD2C 100%)"
                              : "linear-gradient(135deg, #133F71 0%, #0D2A4C 100%)",
                          }}
                        >
                          <span
                            className="text-white"
                            style={{ fontSize: "2rem" }}
                          >
                            {index === 0
                              ? "⚡"
                              : index === 1
                              ? "🚀"
                              : index === 2
                              ? "💎"
                              : index === 3
                              ? "🏢"
                              : "🌟"}
                          </span>
                        </div>
                      </div>

                      <h4 className="fw-bold text-primary-custom mb-2">
                        {plan.name}
                      </h4>
                      <p
                        className="text-secondary-custom small mb-0"
                        style={{ minHeight: "60px" }}
                      >
                        {plan.description}
                      </p>
                    </div>

                    <div className="mb-4">
                      <div className="position-relative">
                        <div className="display-3 fw-bold text-primary-custom mb-1">
                          {formatCurrency(plan.price)}
                        </div>
                        <div className="text-secondary-custom small">
                          {calculatePricePerReport(plan)} per report
                        </div>
                        {savings > 0 && (
                          <div className="small text-success fw-semibold mt-1">
                            Save {formatCurrency(savings)} vs individual reports
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="mb-4 flex-grow-1">
                      <div className="d-flex justify-content-center align-items-center mb-3 p-3 bg-green-light rounded-figma-md">
                        <span className="fs-1 me-2">📊</span>
                        <div>
                          <div className="h3 mb-0 text-primary-custom">
                            {plan.credits}
                          </div>
                          <div className="small text-secondary-custom">
                            Report{plan.credits !== 1 ? "s" : ""}
                          </div>
                        </div>
                      </div>

                      {plan.expirationMonths && (
                        <div className="d-flex align-items-center justify-content-center text-secondary-custom small mb-3">
                          <span className="me-2">⏰</span>
                          Valid for {plan.expirationMonths} month
                          {plan.expirationMonths !== 1 ? "s" : ""}
                        </div>
                      )}

                      {!plan.expirationMonths && (
                        <div className="d-flex align-items-center justify-content-center text-success small mb-3">
                          <span className="me-2">♾️</span>
                          Never expires
                        </div>
                      )}

                      <div className="text-start">
                        <div className="small text-secondary-custom fw-semibold mb-2">
                          What's included:
                        </div>
                        <ul className="list-unstyled small text-secondary-custom">
                          <li className="d-flex align-items-center mb-2">
                            <span className="text-success me-2">✅</span>
                            Property Summary Analysis
                          </li>
                          <li className="d-flex align-items-center mb-2">
                            <span className="text-success me-2">✅</span>
                            Rent Estimate & Market Positioning
                          </li>
                          <li className="d-flex align-items-center mb-2">
                            <span className="text-success me-2">✅</span>
                            AI-Generated Investor Insights
                          </li>
                          <li className="d-flex align-items-center mb-2">
                            <span className="text-success me-2">✅</span>
                            Local Rent Comparables
                          </li>
                          <li className="d-flex align-items-center mb-2">
                            <span className="text-success me-2">✅</span>
                            Comprehensive Investor Metrics
                          </li>
                          <li className="d-flex align-items-center mb-2">
                            <span className="text-success me-2">✅</span>
                            PDF Download
                          </li>
                          {plan.credits >= 5 && (
                            <li className="d-flex align-items-center mb-2">
                              <span className="text-warning me-2">⭐</span>
                              Priority Support
                            </li>
                          )}
                          {plan.credits >= 20 && (
                            <li className="d-flex align-items-center mb-2">
                              <span className="text-warning me-2">📈</span>
                              Advanced Analytics
                            </li>
                          )}
                          {plan.credits >= 50 && (
                            <li className="d-flex align-items-center mb-2">
                              <span className="text-warning me-2">🔗</span>
                              API Access
                            </li>
                          )}
                        </ul>
                      </div>
                    </div>

                    <Button
                      variant={isPopular ? "primary" : "outline-primary"}
                      className={`w-100 py-3 fw-semibold rounded-figma-md ${
                        isPopular ? "btn-primary-gradient" : ""
                      }`}
                      onClick={() => handleSelectPlan(plan)}
                      disabled={isLoading}
                      style={{
                        fontSize: "16px",
                        transition: "all 0.3s ease",
                      }}
                    >
                      {isLoading ? (
                        <>
                          <Spinner size="sm" className="me-2" />
                          Processing...
                        </>
                      ) : (
                        <>Get {plan.name} →</>
                      )}
                    </Button>
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
        </Row>

        {/* Features Comparison */}
        <Row className="mt-5">
          <Col>
            <Card className="border-0 shadow-lg rounded-figma-xl overflow-hidden">
              <div className="bg-gradient-primary text-white p-4 text-center">
                <h3 className="mb-2 fw-bold">🏆 Why Choose RentIntel?</h3>
                <p className="mb-0 opacity-90">
                  The most comprehensive rental intelligence platform
                </p>
              </div>
              <Card.Body className="p-4">
                <Row className="g-4">
                  <Col md={3} className="text-center">
                    <div className="mb-3">
                      <div
                        className="mx-auto rounded-circle d-flex align-items-center justify-content-center text-white mb-3"
                        style={{
                          width: "60px",
                          height: "60px",
                          background:
                            "linear-gradient(135deg, #2CA248 0%, #20CD2C 100%)",
                        }}
                      >
                        <span style={{ fontSize: "1.5rem" }}>🎯</span>
                      </div>
                      <h6 className="fw-bold text-primary-custom">
                        Accurate Data
                      </h6>
                      <p className="small text-secondary-custom mb-0">
                        AI-powered analysis with real market data
                      </p>
                    </div>
                  </Col>
                  <Col md={3} className="text-center">
                    <div className="mb-3">
                      <div
                        className="mx-auto rounded-circle d-flex align-items-center justify-content-center text-white mb-3"
                        style={{
                          width: "60px",
                          height: "60px",
                          background:
                            "linear-gradient(135deg, #FFB24A 0%, #FF8C42 100%)",
                        }}
                      >
                        <span style={{ fontSize: "1.5rem" }}>⚡</span>
                      </div>
                      <h6 className="fw-bold text-primary-custom">
                        Instant Reports
                      </h6>
                      <p className="small text-secondary-custom mb-0">
                        Get comprehensive reports in seconds
                      </p>
                    </div>
                  </Col>
                  <Col md={3} className="text-center">
                    <div className="mb-3">
                      <div
                        className="mx-auto rounded-circle d-flex align-items-center justify-content-center text-white mb-3"
                        style={{
                          width: "60px",
                          height: "60px",
                          background:
                            "linear-gradient(135deg, #133F71 0%, #0D2A4C 100%)",
                        }}
                      >
                        <span style={{ fontSize: "1.5rem" }}>🔒</span>
                      </div>
                      <h6 className="fw-bold text-primary-custom">
                        Secure Payments
                      </h6>
                      <p className="small text-secondary-custom mb-0">
                        Protected by Stripe's enterprise security
                      </p>
                    </div>
                  </Col>
                  <Col md={3} className="text-center">
                    <div className="mb-3">
                      <div
                        className="mx-auto rounded-circle d-flex align-items-center justify-content-center text-white mb-3"
                        style={{
                          width: "60px",
                          height: "60px",
                          background:
                            "linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)",
                        }}
                      >
                        <span style={{ fontSize: "1.5rem" }}>📞</span>
                      </div>
                      <h6 className="fw-bold text-primary-custom">
                        Expert Support
                      </h6>
                      <p className="small text-secondary-custom mb-0">
                        Get help from our real estate experts
                      </p>
                    </div>
                  </Col>
                </Row>
              </Card.Body>
            </Card>
          </Col>
        </Row>

        {/* Help Section */}
        <Row className="mt-5">
          <Col>
            <Card className="border-0 bg-light rounded-figma-xl">
              <Card.Body className="text-center py-5">
                <div className="mb-4">
                  <h4 className="fw-bold text-primary-custom">
                    Need Help Choosing?
                  </h4>
                  <p className="text-secondary-custom mb-0">
                    Our team can help you find the perfect solution for your
                    needs.
                  </p>
                </div>
                <div className="d-flex justify-content-center gap-3 flex-wrap">
                  <Button
                    variant="outline-primary"
                    className="rounded-figma-md px-4"
                  >
                    📞 Contact Sales
                  </Button>
                  <Button
                    variant="outline-secondary"
                    className="rounded-figma-md px-4"
                  >
                    📖 View FAQ
                  </Button>
                  <Button
                    variant="outline-info"
                    className="rounded-figma-md px-4"
                  >
                    🎥 Watch Demo
                  </Button>
                </div>
              </Card.Body>
            </Card>
          </Col>
        </Row>

        {/* Stripe Payment Modal */}
        <Modal
          show={showPaymentModal}
          onHide={() => {
            setShowPaymentModal(false);
            setSelectedPlan(null);
          }}
          title="Complete Your Purchase"
          size="lg"
          showFooter={false}
        >
          {console.log("Modal rendering, selectedPlan:", selectedPlan)}
          {selectedPlan ? (
            <Elements stripe={stripePromise}>
              <div className="w-100">
                <div className="text-center mb-4 p-4 bg-green-light rounded-figma-md">
                  <h5 className="text-primary-custom fw-bold mb-2">
                    {selectedPlan.name}
                  </h5>
                  <div className="display-6 text-primary-custom fw-bold mb-1">
                    {formatCurrency(selectedPlan.price)}
                  </div>
                  <div className="text-secondary-custom">
                    {selectedPlan.credits} report
                    {selectedPlan.credits !== 1 ? "s" : ""} •{" "}
                    {calculatePricePerReport(selectedPlan)} per report
                  </div>
                  {calculateSavings(selectedPlan) > 0 && (
                    <div className="text-success fw-semibold mt-2">
                      💰 Save {formatCurrency(calculateSavings(selectedPlan))}{" "}
                      compared to individual reports
                    </div>
                  )}
                </div>

                <PaymentForm
                  selectedPlan={selectedPlan}
                  onSuccess={handlePaymentSuccess}
                  onCancel={() => {
                    setShowPaymentModal(false);
                    setSelectedPlan(null);
                  }}
                  isLoading={false}
                />

                <div className="mt-4 p-3 bg-light rounded-figma-md">
                  <div className="d-flex align-items-center justify-content-center text-secondary-custom small">
                    <span className="me-2">🔒</span>
                    <span>
                      Secured by Stripe • Your payment information is encrypted
                      and secure
                    </span>
                  </div>
                </div>
              </div>
            </Elements>
          ) : (
            <div className="text-center py-4">
              <div className="text-warning mb-3" style={{ fontSize: "3rem" }}>
                ⚠️
              </div>
              <p className="text-secondary-custom mb-0">
                No plan selected. Please try again.
              </p>
              <p className="text-secondary-custom small">
                Debug: selectedPlan = {JSON.stringify(selectedPlan)}
              </p>
            </div>
          )}
        </Modal>
      </Container>
    </SidebarLayout>
  );
}
